name: Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for sensitive information
        run: |
          echo "Scanning for potential sensitive information..."
          
          # Check for common sensitive patterns
          sensitive_patterns=(
            "password"
            "secret"
            "token"
            "api_key"
            "private_key"
            "credential"
          )
          
          found_issues=false
          
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -ri "$pattern" Nithilan --include="*.html" --include="*.js" --include="*.css" | grep -v "placeholder\|example\|demo"; then
              echo "⚠️  Found potential sensitive information: $pattern"
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = false ]; then
            echo "✅ No sensitive information detected"
          fi

      - name: Check for security headers
        run: |
          echo "Checking for security-related meta tags..."
          
          # Check if HTML files have security-related meta tags
          find Nithilan -name "*.html" -type f | while read file; do
            echo "Checking security headers in: $file"
            
            # Check for viewport meta tag (prevents clickjacking)
            if grep -q 'name="viewport"' "$file"; then
              echo "✅ Viewport meta tag found in $file"
            else
              echo "⚠️  Consider adding viewport meta tag to $file"
            fi
            
            # Check for charset declaration
            if grep -q 'charset=' "$file"; then
              echo "✅ Charset declaration found in $file"
            else
              echo "⚠️  Consider adding charset declaration to $file"
            fi
          done

      - name: Check external dependencies
        run: |
          echo "Checking external dependencies for security..."
          
          # Check for external scripts and stylesheets
          find Nithilan -name "*.html" -type f | while read file; do
            echo "Checking external resources in: $file"
            
            # Check for HTTP (non-HTTPS) external resources
            if grep -o 'src="http://[^"]*"' "$file" || grep -o 'href="http://[^"]*"' "$file"; then
              echo "⚠️  Found HTTP (non-HTTPS) external resources in $file"
              echo "Consider using HTTPS for better security"
            fi
            
            # List external domains being used
            external_domains=$(grep -o 'https://[^/"]*' "$file" | sort -u)
            if [ ! -z "$external_domains" ]; then
              echo "External domains used in $file:"
              echo "$external_domains"
            fi
          done

      - name: Generate security report
        if: always()
        run: |
          echo "## Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "### Scan Summary:" >> security-report.md
          echo "- Repository scanned for vulnerabilities" >> security-report.md
          echo "- Checked for sensitive information exposure" >> security-report.md
          echo "- Validated security headers and best practices" >> security-report.md
          echo "- Analyzed external dependencies" >> security-report.md
          echo "" >> security-report.md
          echo "### Recommendations:" >> security-report.md
          echo "- Ensure all external resources use HTTPS" >> security-report.md
          echo "- Keep dependencies updated" >> security-report.md
          echo "- Review external domains for trustworthiness" >> security-report.md
          echo "- Consider implementing Content Security Policy (CSP)" >> security-report.md

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
